#ifndef SGIT_ERROR_H
#define SGIT_ERROR_H

#include "sgit.h"

namespace sgit {
	static inline void ErrorInit(Handle<Object> target) {
		HandleScope scope;

		/*Handle<Object> errorsObj = Object::New();
		target->Set(String::NewSymbol("error"), errorsObj);

		NODE_DEFINE_CONSTANT(errorsObj, GIT_OK);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ERROR);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ENOTOID);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ENOTFOUND);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ENOMEM);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EOSERR);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EOBJTYPE);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EOBJCORRUPTED);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ENOTAREPO);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EINVALIDTYPE);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EMISSINGOBJDATA);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EPACKCORRUPTED);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EFLOCKFAIL);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EZLIB);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EBUSY);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EBAREINDEX);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EINVALIDREFNAME);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EREFCORRUPTED);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ETOONESTEDSYMREF);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EPACKEDREFSCORRUPTED);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EINVALIDPATH);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EREVWALKOVER);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_EINVALIDREFSTATE);
		NODE_DEFINE_CONSTANT(errorsObj, GIT_ENOTIMPLEMENTED);*/
	}
}

#endif // SGIT_ERROR_H
